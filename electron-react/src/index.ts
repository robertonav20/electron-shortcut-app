import { app, BrowserWindow, protocol, screen } from 'electron';
import { initialize } from './preload';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

app.disableHardwareAcceleration()

protocol.registerSchemesAsPrivileged([
  { scheme: "app", privileges: { secure: true, standard: true } },
]);

const createWindow = (): void => {
  // Create the browser window.
  const displays = screen.getAllDisplays()
  const externalDisplay = displays.find((display) => {
    return display.bounds.x !== 0 || display.bounds.y !== 0
  })

  let x, y = undefined
  let width = 1024
  let height = 768
  if (externalDisplay) {
    x = externalDisplay.bounds.x + 50
    y = externalDisplay.bounds.y + 50
    width = externalDisplay.workAreaSize.width
    height = externalDisplay.workAreaSize.height
  }

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    autoHideMenuBar: true,
    x,
    y,
    width,
    height,
    minWidth: width - 100,
    maxWidth: width + 100,
    minHeight: height - 100,
    maxHeight: height + 100,
    webPreferences: {
      contextIsolation: false,
      nodeIntegration: true
    }
  });

  initialize(mainWindow)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
